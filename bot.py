import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from config import TOKEN
from datetime import datetime

logging.basicConfig(level=logging.INFO)

bot = Bot(token=TOKEN)
dp = Dispatcher(bot=bot)

MSG = "–ú–∏–ª–∞—è, –ø–æ—Ä–∞ –ø–∏—Ç—å —Ç–∞–±–ª–µ—Ç–æ—á–∫–∏ üíä"
reminder_times = ["8:00", "20:00"]
subscribed_users = set()
sent_today = {}

keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="‚úÖ –°—Ç–∞—Ä—Ç", callback_data="start_reminder")],
    [InlineKeyboardButton(text="üõë –°—Ç–æ–ø", callback_data="stop_reminder")]
])

@dp.message(CommandStart())
async def start_handler(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –ø–∏—Ç—å —Ç–∞–±–ª–µ—Ç–æ—á–∫–∏ –≤ 08:00 –∏ 20:00.\n"
        "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å –∏–ª–∏ –æ—Ç–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:",
        reply_markup=keyboard
    )

@dp.callback_query(F.data == "start_reminder")
async def handle_start_button(callback: CallbackQuery):
    user_id = callback.from_user.id
    subscribed_users.add(user_id)
    await callback.answer("–¢—ã –ø–æ–¥–ø–∏—Å–∞–Ω–∞ –Ω–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è üíå")
    await callback.message.edit_text("‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã.\n\n(–ù–∞–∂–º–∏ ¬´–°—Ç–æ–ø¬ª, —á—Ç–æ–±—ã –æ—Ç–∫–ª—é—á–∏—Ç—å)", reply_markup=keyboard)

@dp.callback_query(F.data == "stop_reminder")
async def handle_stop_button(callback: CallbackQuery):
    user_id = callback.from_user.id
    subscribed_users.discard(user_id)
    await callback.answer("–¢—ã –æ—Ç–ø–∏—Å–∞–ª–∞—Å—å –æ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π ‚ùå")
    await callback.message.edit_text("üõë –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã.\n\n(–ù–∞–∂–º–∏ ¬´–°—Ç–∞—Ä—Ç¬ª, —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å)", reply_markup=keyboard)

async def send_reminders():
    while True:
        now = datetime.now()
        time_str = now.strftime("%H:%M")
        date_str = now.date().isoformat()

        for target_time in reminder_times:
            if time_str == target_time and sent_today.get(target_time) != date_str:
                for user_id in subscribed_users:
                    try:
                        await bot.send_message(user_id, MSG)
                        logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {user_id} –≤ {time_str}")
                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")
                sent_today[target_time] = date_str

        await asyncio.sleep(30)

async def main():
    asyncio.create_task(send_reminders())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
